import PyPDF2
import cohere
import re

API_KEY_FILE = "API_KEY.txt"

#a file to contain methods called by the app
#that are not database related
class Services:
    @staticmethod
    def pdf_to_text(pdf_file_stream):
        #get pdf data into a list
        pdf_reader = PyPDF2.PdfFileReader(pdf_file_stream)
        text = ""
        #go through each page
        for page in range(pdf_reader.getNumPages()):
            #get the page object
            page_obj = pdf_reader.getPage(page)
            #add the text on this page
            text += page_obj.extractText()
        text = text.replace('\n', '')
        return text

    @staticmethod
    def text_to_flashcards(text):
        #takes a bunch of text and returns a flashcard for each sentence in the text
        #in a list form [(title, answer)]
        #split the text up into sentences
        sentences = re.split("\. |; |\.\n|\n",text)
        for sentence in sentences:
            print(sentence)
        #initialise the flashcard list
        flashcards = []
        #go through each sentence and convert to a flashcard
        for sentence in sentences:
            flashcards.append(Services.sentence_to_flashcard(sentence))
        return flashcards

    @staticmethod
    def get_api_key():
        with open(API_KEY_FILE, "r") as f:
            text = f.readlines()[0]
        text.strip()
        return text

    @staticmethod
    def sentence_to_flashcard(sentence_input):
        #takes a sentence and returns a flashcard
        #in the form (title, answer)
        #query the language processing api
        api_key = Services.get_api_key()
        co = cohere.Client(api_key)
        prompt = f"""This is a bot that automatically generates a flashcard title and answer from a given sentence. 
        sentence: The pentatonic scale is the first 4 dominants
        title: pentatonic scale
        answer: first 4 dominants
        --
        sentence: The degree of multiprogramming is limited by the number of partitions available.
        title: what limits the multiprogramming?
        answer: the number of partitions available
        --
        sentence: Error in a quarter comma meantone perfect fifth is 5.4 cents
        title: Error in a quarter comma meantone perfect fifth
        answer: 5.4 cents
        --
        sentence: A hole is a block of available memory - holes of various size are scattered throughout memory.
        title: what is a hole in memory?
        answer: a block of available memory of various sizes, scattered throughout memory
        --
        sentence: microtonal tuning is any tuning involving intervals less than a semitone
        title: microtonal tuning
        answer: any tuning involving intervals less than a semitone
        --
        sentence: Logical address space is the set of all logical addresses generated by a program, whilst physical address space is the set of all physical addresses generated by a program
        title: logical address space
        answer: all of the logical addresses generated by a program
        --
        sentence: {sentence_input}
        title:"""
        response = co.generate(
            model='xlarge',
            prompt=prompt,
            max_tokens=40,
            stop_sequences=["--"])
        caption = response.generations[0].text
        #remove leading whitespace
        caption = caption.lstrip()
        #remove the -- in case its there
        caption = caption.strip("--")
        #check it worked properly by checking the
        #"answser:" is present
        flashcard = None
        if "answer: " in caption:
            #split the answer into the title and answer
            flashcard = caption.split("answer: ")
            #remove trailing whitespace from both
            flashcard[0] = flashcard[0].rstrip()
            flashcard[1] = flashcard[1].rstrip()

        return flashcard


